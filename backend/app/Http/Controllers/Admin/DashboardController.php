<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Theme;
use App\Models\Template;
use App\Models\UserCreation;
use App\Models\UserFeedback;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Cache;

class DashboardController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth:admin');
    }

    public function index()
    {
        $stats = Cache::remember('admin_dashboard_stats', 300, function () {
            return [
                'users' => [
                    'total' => User::count(),
                    'active' => User::whereNotNull('email_verified_at')->count(),
                    'premium' => User::where('subscription_type', 'premium')
                        ->where('subscription_expires_at', '>', now())
                        ->count(),
                    'today' => User::whereDate('created_at', today())->count(),
                    'this_week' => User::whereBetween('created_at', [
                        Carbon::now()->startOfWeek(),
                        Carbon::now()->endOfWeek()
                    ])->count(),
                    'this_month' => User::whereBetween('created_at', [
                        Carbon::now()->startOfMonth(),
                        Carbon::now()->endOfMonth()
                    ])->count(),
                ],
                'content' => [
                    'themes' => Theme::where('is_active', true)->count(),
                    'templates' => Template::where('is_active', true)->count(),
                    'status_generated' => UserCreation::count(),
                    'status_today' => UserCreation::whereDate('created_at', today())->count(),
                ],
                'engagement' => [
                    'total_feedback' => UserFeedback::count(),
                    'positive_feedback' => UserFeedback::where('rating', '>=', 4)->count(),
                    'avg_rating' => UserFeedback::avg('rating') ?? 0,
                    'recent_feedback' => UserFeedback::where('created_at', '>=', Carbon::now()->subDays(7))->count(),
                ],
                'system' => [
                    'disk_usage' => $this->getDiskUsage(),
                    'memory_usage' => $this->getMemoryUsage(),
                    'cache_size' => $this->getCacheSize(),
                    'queue_pending' => $this->getQueuePending(),
                ]
            ];
        });

        $chartData = Cache::remember('admin_dashboard_charts', 300, function () {
            return [
                'user_growth' => $this->getUserGrowthData(),
                'status_generation' => $this->getStatusGenerationData(),
                'revenue' => $this->getRevenueData(),
                'top_themes' => $this->getTopThemesData(),
            ];
        });

        $recentActivity = Cache::remember('admin_recent_activity', 60, function () {
            return [
                'new_users' => User::with('profile')
                    ->latest()
                    ->limit(5)
                    ->get()
                    ->map(function ($user) {
                        return [
                            'type' => 'user_registration',
                            'message' => "New user registered: {$user->name}",
                            'time' => $user->created_at,
                            'user' => $user
                        ];
                    }),
                'recent_feedback' => UserFeedback::with('user')
                    ->latest()
                    ->limit(5)
                    ->get()
                    ->map(function ($feedback) {
                        return [
                            'type' => 'feedback',
                            'message' => "New feedback from {$feedback->user->name}: {$feedback->rating} stars",
                            'time' => $feedback->created_at,
                            'feedback' => $feedback
                        ];
                    }),
                'status_generated' => UserCreation::with('user')
                    ->latest()
                    ->limit(5)
                    ->get()
                    ->map(function ($status) {
                        return [
                            'type' => 'status_generation',
                            'message' => "Status generated by {$status->user->name}",
                            'time' => $status->created_at,
                            'status' => $status
                        ];
                    })
            ];
        });

        return view('admin.dashboard', compact('stats', 'chartData', 'recentActivity'));
    }

    private function getUserGrowthData()
    {
        $days = 30;
        $data = [];
        
        for ($i = $days - 1; $i >= 0; $i--) {
            $date = Carbon::now()->subDays($i);
            $count = User::whereDate('created_at', $date)->count();
            $data[] = [
                'date' => $date->format('M d'),
                'users' => $count
            ];
        }
        
        return $data;
    }

    private function getStatusGenerationData()
    {
        $days = 7;
        $data = [];
        
        for ($i = $days - 1; $i >= 0; $i--) {
            $date = Carbon::now()->subDays($i);
            $count = UserCreation::whereDate('created_at', $date)->count();
            $data[] = [
                'date' => $date->format('M d'),
                'count' => $count
            ];
        }
        
        return $data;
    }

    private function getRevenueData()
    {
        $months = 6;
        $data = [];
        
        for ($i = $months - 1; $i >= 0; $i--) {
            $date = Carbon::now()->subMonths($i);
            $revenue = User::where('subscription_type', 'premium')
                ->whereMonth('subscription_expires_at', $date->month)
                ->whereYear('subscription_expires_at', $date->year)
                ->count() * 9.99; // Assuming $9.99 premium price
            
            $data[] = [
                'month' => $date->format('M Y'),
                'revenue' => $revenue
            ];
        }
        
        return $data;
    }

    private function getTopThemesData()
    {
        return Theme::withCount('templates')
            ->orderByDesc('templates_count')
            ->limit(5)
            ->get()
            ->map(function ($theme) {
                return [
                    'name' => $theme->name,
                    'count' => $theme->templates_count
                ];
            });
    }

    private function getDiskUsage()
    {
        $bytes = disk_free_space('/');
        $total = disk_total_space('/');
        return [
            'used' => $total - $bytes,
            'total' => $total,
            'percentage' => round((($total - $bytes) / $total) * 100, 2)
        ];
    }

    private function getMemoryUsage()
    {
        return [
            'current' => memory_get_usage(true),
            'peak' => memory_get_peak_usage(true),
            'limit' => $this->convertToBytes(ini_get('memory_limit'))
        ];
    }

    private function getCacheSize()
    {
        try {
            $redis = app('redis');
            return $redis->dbsize();
        } catch (\Exception $e) {
            return 0;
        }
    }

    private function getQueuePending()
    {
        try {
            return DB::table('jobs')->count();
        } catch (\Exception $e) {
            return 0;
        }
    }

    private function convertToBytes($val)
    {
        $val = trim($val);
        $last = strtolower($val[strlen($val) - 1]);
        $val = (int) $val;
        
        switch ($last) {
            case 'g':
                $val *= 1024;
            case 'm':
                $val *= 1024;
            case 'k':
                $val *= 1024;
        }
        
        return $val;
    }

    public function systemHealth()
    {
        $health = [
            'database' => $this->checkDatabase(),
            'redis' => $this->checkRedis(),
            'storage' => $this->checkStorage(),
            'queue' => $this->checkQueue(),
            'mail' => $this->checkMail(),
        ];

        return response()->json($health);
    }

    private function checkDatabase()
    {
        try {
            DB::connection()->getPdo();
            return ['status' => 'healthy', 'message' => 'Database connection successful'];
        } catch (\Exception $e) {
            return ['status' => 'error', 'message' => 'Database connection failed: ' . $e->getMessage()];
        }
    }

    private function checkRedis()
    {
        try {
            $redis = app('redis');
            $redis->ping();
            return ['status' => 'healthy', 'message' => 'Redis connection successful'];
        } catch (\Exception $e) {
            return ['status' => 'error', 'message' => 'Redis connection failed: ' . $e->getMessage()];
        }
    }

    private function checkStorage()
    {
        try {
            $diskUsage = $this->getDiskUsage();
            $status = $diskUsage['percentage'] > 90 ? 'warning' : 'healthy';
            $message = "Disk usage: {$diskUsage['percentage']}%";
            return ['status' => $status, 'message' => $message];
        } catch (\Exception $e) {
            return ['status' => 'error', 'message' => 'Storage check failed: ' . $e->getMessage()];
        }
    }

    private function checkQueue()
    {
        try {
            $pending = $this->getQueuePending();
            $status = $pending > 100 ? 'warning' : 'healthy';
            $message = "Pending jobs: {$pending}";
            return ['status' => $status, 'message' => $message];
        } catch (\Exception $e) {
            return ['status' => 'error', 'message' => 'Queue check failed: ' . $e->getMessage()];
        }
    }

    private function checkMail()
    {
        try {
            // Simple mail configuration check
            $driver = config('mail.default');
            return ['status' => 'healthy', 'message' => "Mail driver: {$driver}"];
        } catch (\Exception $e) {
            return ['status' => 'error', 'message' => 'Mail check failed: ' . $e->getMessage()];
        }
    }
}