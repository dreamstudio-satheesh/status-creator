
services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: status_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_secret
      MYSQL_DATABASE: status_creator
      MYSQL_USER: status_user
      MYSQL_PASSWORD: secret_password
    volumes:
      - mysql_data:/var/lib/mysql
      # - ./mysql/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      # - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "3306:3306"
    networks:
      - status_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: status_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - status_network
    command: redis-server --appendonly yes

  # Laravel Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: status_backend
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./backend:/var/www
      - ./backend/storage:/var/www/storage
      - ./backend/bootstrap/cache:/var/www/bootstrap/cache
    ports:
      - "8000:80"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - status_network
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - MAIL_HOST=mailhog
      - AWS_ENDPOINT=http://minio:9000

  # # Flutter Frontend (Development)
  # flutter:
  #   build:
  #     context: ./flutter
  #     dockerfile: Dockerfile
  #   container_name: status_flutter
  #   restart: unless-stopped
  #   working_dir: /app
  #   volumes:
  #     - ./flutter:/app
  #     - flutter_pub_cache:/root/.pub-cache
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - backend
  #   networks:
  #     - status_network
  #   environment:
  #     - API_BASE_URL=http://backend/api
  #   stdin_open: true
  #   tty: true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: status_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      # - flutter
    networks:
      - status_network

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: status_minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9002:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DEFAULT_BUCKETS: status-uploads
    command: server /data --console-address ":9001"
    networks:
      - status_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Mailhog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: status_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - status_network

  # phpMyAdmin (Database management)
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: status_phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      PMA_USER: root
      PMA_PASSWORD: root_secret
      UPLOAD_LIMIT: 100M
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - status_network

  # Laravel Queue Worker
  queue-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: status_queue
    restart: unless-stopped
    working_dir: /var/www
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    volumes:
      - ./backend:/var/www
    depends_on:
      - backend
      - redis
    networks:
      - status_network

  # Laravel Scheduler
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: status_scheduler
    restart: unless-stopped
    working_dir: /var/www
    command: /bin/sh -c "while true; do php artisan schedule:run --verbose --no-interaction & sleep 60; done"
    volumes:
      - ./backend:/var/www
    depends_on:
      - backend
    networks:
      - status_network

networks:
  status_network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  flutter_pub_cache:
    driver: local